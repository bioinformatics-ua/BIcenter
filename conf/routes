# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

############################################################################
##########  Application
############################################################################
# An example controller showing a sample home page
GET         /                                               controllers.HomeController.index
GET         /assets/javascripts/jsroutes.js                 controllers.Application.javascriptRoutes
GET         /assets/javascripts/messages.js                 controllers.Application.jsMessages
GET         /langs                                          controllers.Application.supportedLanguages

# Map static resources from the /public folder to the /assets URL path
GET         /assets/*file                                   controllers.Assets.versioned(path="/public", file: Asset)

# Handles the pipeline step svg images.
GET         /middle/:image                                  controllers.SvgController.service(image:String)

# Handles the pipeline.
GET         /graph/new/:name                                controllers.TransGraphController.new_task(name:String)
GET         /graph/:graphId/load                            controllers.TransGraphController.load_task(graphId:Long)
GET         /graph/:name/task                               controllers.TransGraphController.get_task(name:String)
GET         /graph/load                                     controllers.TransGraphController.load_trans(filename: String ?= "/transformations/Add a sequence - Basic example.ktr")
POST        /graph/:graphId/new/step                        controllers.TransGraphController.add_step(graphId:Long)
DELETE      /graph/:stepId/new/step                         controllers.TransGraphController.remove_step(stepId:Long)
GET         /graph/:graphId/steps                           controllers.TransGraphController.get_steps(graphId:Long)
POST        /graph/:graphId/new/hop                         controllers.TransGraphController.add_hop(graphId:Long)
DELETE      /graph/:hopId/new/hop                           controllers.TransGraphController.remove_hop(hopId:Long)
POST        /graph/run                                      controllers.TransGraphController.run()
GET         /graph/result                                   controllers.TransGraphController.result(execution: String)
GET         /graph/:graphId/preview                         controllers.TransGraphController.preview_results(graphId:Integer)
GET         /graph/:graphId                                 controllers.TransGraphController.select_task(graphId:Integer)

# Handles the steps.
GET         /graph/:graphId/step/:stepId/configure          controllers.StepController.configure(graphId:Long,stepId:Long)
POST        /step/inputFieldsName                           controllers.StepController.inputFieldsName()
POST        /step/inputOutputFields                         controllers.StepController.inputOutputFields()
GET         /step/:stepId/schema                            controllers.StepController.getSchema(stepId:Long)
POST        /step/:stepId/apply                             controllers.StepController.apply_changes(stepId:Long)
GET         /step/:stepId                                   controllers.StepController.getStep(stepId:Long)